{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [transactionsByAllEmployees, setTransactionsByAllEmployees] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData\n  };\n}\n\n_s(useTransactionsByEmployee, \"HgJsrddO7DayI+SJENbLygAhoJY=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","transactionsByAllEmployees","setTransactionsByAllEmployees","fetchById","employeeId","data","invalidateData"],"sources":["/Users/zoharehan/Downloads/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n  const [transactionsByAllEmployees, setTransactionsByAllEmployees] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      )\n\n      setTransactionsByEmployee(data)\n    },\n    [fetchWithCache]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EACA,MAAM,CAACO,0BAAD,EAA6BC,6BAA7B,IAA8DR,QAAQ,CAAuB,IAAvB,CAA5E;EAEA,MAAMS,SAAS,GAAGV,WAAW,CAC3B,MAAOW,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMR,cAAc,CAC/B,wBAD+B,EAE/B;MACEO;IADF,CAF+B,CAAjC;IAOAJ,yBAAyB,CAACK,IAAD,CAAzB;EACD,CAV0B,EAW3B,CAACR,cAAD,CAX2B,CAA7B;EAcA,MAAMS,cAAc,GAAGb,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEK,IAAI,EAAEN,sBAAR;IAAgCD,OAAhC;IAAyCK,SAAzC;IAAoDG;EAApD,CAAP;AACD;;GAxBeV,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}